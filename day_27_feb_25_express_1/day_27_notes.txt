Express.JS
==========
-Express.js is a web application framework for building RESTful APIs with Node.js.
-a framework is a set of helper functions,tools and rules that help us to build our application.
-It provides various features that make web application development fast and easy which otherwise takes more time using only Node.js.
-Alternatives to Express.js are 'NestJS' , 'Vanilla Node.js','koa','sails.js'
-NestJS : A progressive Node.js framework for building efficient, reliable and scalable server-side applications.

https://expressjs.com/en/starter/examples.html


Advantages of Express.js
========================
-Makes Node.js web application development fast and easy.
-Easy to configure and customize.
-Allows to define routes of your application based on HTTP methods and URLs.
-Includes various middleware modules which you can use to perform additional tasks on request and response.
-Easy to integrate with different template engines like Jade, Vash, EJS etc.
-Allows to define an error handling middleware.
-Easy to serve static files and resources of your application.
-Allows to create REST API server.
-Easy to connect with databases such as MongoDB, Redis, MySQL.



How to use Express
==================
1. import express
   const express = require('express')
2. create an instance of express.
   const app = express()
3. use methods
   app.get(route, callback)
   app.post(route, callback)


Express Methods
===============
app.get()
app.post()
app.put()
app.patch()
app.delete()
app.listen()
app.use()
app.all()



app.use() vs app.get()
======================
-app.use() can handle all type of HTTP requests(GET,POST,PUT,DELETE)
-app.use() is generally used for introducing middlewares.
 app.use(express.json()); // express.json() is middleware
-app.get() is only for handling GET HTTP requests.
 app.get('/users', (req, res) => { 
    res.send('all users')
 })


app.use() vs app.all()
======================
app.use() will only see whether url starts with specified path.
app.all() will match the complete path.

app.use( "/book" , middleware);
// will match /book
// will match /book/author
// will match /book/subject
// won't match /book-123

app.all( "/book" , handler);
// will match /book
// won't match /book/author   
// won't match /book/subject  
// won't match /book-123  

app.all( "/book/*" , handler);
// won't match /book   
// won't match /book-123      
// will match /book/author
// will match /book/subject



Express.js Request Object Properties
====================================
req.app
req.body
req.cookies
req.hostname
req.ip
req.method
req.params
req.path
req.protocol
req.query



Response methods
================
The methods on the response object (res) in the following table can send a response to the client, and terminate the request-response cycle. If none of these methods are called from a route handler, the client request will be left hanging.

Method	Description
res.send()	Send a response of various types. (Buffer / JSON / HTML / String)
res.end()	End the response process.
res.json()	Send a JSON response.
res.jsonp()	Send a JSON response with JSONP support.
res.redirect()	Redirect a request.
res.render()	Render a view template.
res.sendFile()	Send a file as an octet stream.
res.download()	Prompt a file to be downloaded.
res.sendStatus()	Set the response status code and send its string representation as the response body.


Status() vs sendStatus()
========================
res.sendStatus(200); // equivalent to res.status(200).send('OK') 
res.sendStatus(403); // equivalent to res.status(403).send('Forbidden')
res.sendStatus(404); // equivalent to res.status(404).send('Not Found') 
res.sendStatus(500); // equivalent to res.status(500).send('Internal Server Error')



Express Routing
===============
-Routing refers to how an applicationâ€™s endpoints (URIs) respond to client requests.
-Route paths, in combination with a request method, define the endpoints at which requests can be made.
-Route paths can be strings, string patterns, or regular expressions

Examples:
app.get('/ab?cd');   // will match acd and abcd
app.get('/ab+cd');   // will match abcd, abbcd, abbbcd
app.get('/ab*cd');   // will match abcd, abxcd, abRANDOMcd, ab123cd
app.get('/ab(cd)?e'); // will match /abe and /abcde
app.get(/.*fly$/);  // will match butterfly and dragonfly, but not butterflyman, dragonflyman



Express PathParam & QueryParam
==============================
1. Path-Param
	ex:- /users/101
	const userId = req.params.userId;
	
Few More Path Params:
app.get('/products/:productId([0-9])/ratings')
app.get('/products/:productId([0-9])/ratings/:ratingId')

2. Query-param
	ex:- /search?searchWord=skybag&filter=something
	const {searchWord,filter} = req.query;



express.Router()
================
-express.Router() creates a new router object that can handle requests in a modular and organized way

Modularity: Group routes based on features or functionality. (users, products,  orders)
Scalability: Organize routes for large applications and separate them into different modules.
Middleware Management: Apply middleware to specific routes or groups of routes easily.
Cleaner Code: By dividing routes into smaller, focused files, our codebase remains clean and readable.